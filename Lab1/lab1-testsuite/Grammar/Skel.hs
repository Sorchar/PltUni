-- Haskell module generated by the BNF converter

module Grammar.Skel where

import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Grammar.Abs.Id -> Result
transId x = case x of
  Grammar.Abs.Id string -> failure x
transProgram :: Grammar.Abs.Program -> Result
transProgram x = case x of
  Grammar.Abs.PDefs defs -> failure x
transDef :: Grammar.Abs.Def -> Result
transDef x = case x of
  Grammar.Abs.DFun type_ id args stms -> failure x
  Grammar.Abs.DFunCall type_ id args -> failure x
  Grammar.Abs.DNameSpace exp -> failure x
  Grammar.Abs.DDecl type_ decl -> failure x
  Grammar.Abs.DDecls type_ decls -> failure x
  Grammar.Abs.DTypeDefId type_ id -> failure x
transStm :: Grammar.Abs.Stm -> Result
transStm x = case x of
  Grammar.Abs.STypeDefId type_ id -> failure x
  Grammar.Abs.SDecl type_ decl -> failure x
  Grammar.Abs.SDecls type_ decls -> failure x
  Grammar.Abs.SInit type_ id exp -> failure x
  Grammar.Abs.SEexp exp -> failure x
  Grammar.Abs.SReturn exp -> failure x
  Grammar.Abs.SWhile exp stm -> failure x
  Grammar.Abs.SEWhile exp -> failure x
  Grammar.Abs.SBlock stms -> failure x
  Grammar.Abs.SIfElse exp stm else_ -> failure x
  Grammar.Abs.SConstRefInit type_ id exp -> failure x
  Grammar.Abs.SFor type_ id exp1 exp2 exp3 stm -> failure x
  Grammar.Abs.SConstInitId type_ id exp -> failure x
  Grammar.Abs.SDo stm exp -> failure x
transArg :: Grammar.Abs.Arg -> Result
transArg x = case x of
  Grammar.Abs.ADecl type_ -> failure x
  Grammar.Abs.ADeclId type_ id -> failure x
  Grammar.Abs.AConstRefTypeId type_ id -> failure x
  Grammar.Abs.ARefId type_ id -> failure x
  Grammar.Abs.AConstRefType type_ -> failure x
  Grammar.Abs.ARefType type_ -> failure x
transDecl :: Grammar.Abs.Decl -> Result
transDecl x = case x of
  Grammar.Abs.SDeclId id -> failure x
transElse :: Grammar.Abs.Else -> Result
transElse x = case x of
  Grammar.Abs.SEElse -> failure x
  Grammar.Abs.SElse stm -> failure x
transExp :: Grammar.Abs.Exp -> Result
transExp x = case x of
  Grammar.Abs.EChar char -> failure x
  Grammar.Abs.EInt integer -> failure x
  Grammar.Abs.EDouble double -> failure x
  Grammar.Abs.EString stringlist -> failure x
  Grammar.Abs.ETrue -> failure x
  Grammar.Abs.EFalse -> failure x
  Grammar.Abs.EId id -> failure x
  Grammar.Abs.EIndex exp1 exp2 -> failure x
  Grammar.Abs.ECall exp exps -> failure x
  Grammar.Abs.EFun exp1 exp2 -> failure x
  Grammar.Abs.EPIncr exp -> failure x
  Grammar.Abs.EPDcecr exp -> failure x
  Grammar.Abs.EDeref exp -> failure x
  Grammar.Abs.ENot exp -> failure x
  Grammar.Abs.EIncr exp -> failure x
  Grammar.Abs.EDecr exp -> failure x
  Grammar.Abs.ENeg exp -> failure x
  Grammar.Abs.EArrow exp1 exp2 -> failure x
  Grammar.Abs.EMul exp1 exp2 -> failure x
  Grammar.Abs.EDiv exp1 exp2 -> failure x
  Grammar.Abs.EMod exp1 exp2 -> failure x
  Grammar.Abs.EAdd exp1 exp2 -> failure x
  Grammar.Abs.ESub exp1 exp2 -> failure x
  Grammar.Abs.ELt exp1 exp2 -> failure x
  Grammar.Abs.EGt exp1 exp2 -> failure x
  Grammar.Abs.ELEq exp1 exp2 -> failure x
  Grammar.Abs.EGEq exp1 exp2 -> failure x
  Grammar.Abs.EEq exp1 exp2 -> failure x
  Grammar.Abs.ENEq exp1 exp2 -> failure x
  Grammar.Abs.EAnd exp1 exp2 -> failure x
  Grammar.Abs.EOr exp1 exp2 -> failure x
  Grammar.Abs.EAss exp1 exp2 -> failure x
  Grammar.Abs.EQstnmrk exp1 exp2 exp3 -> failure x
  Grammar.Abs.EThrowE exp -> failure x
  Grammar.Abs.ELl exp1 exp2 -> failure x
  Grammar.Abs.EGg exp1 exp2 -> failure x
  Grammar.Abs.ELib type_ -> failure x
  Grammar.Abs.ELibs id exp -> failure x
  Grammar.Abs.ETerm -> failure x
transType :: Grammar.Abs.Type -> Result
transType x = case x of
  Grammar.Abs.Tbool -> failure x
  Grammar.Abs.Tdouble -> failure x
  Grammar.Abs.Tint -> failure x
  Grammar.Abs.Tstring -> failure x
  Grammar.Abs.Tvoid -> failure x
  Grammar.Abs.Cnew id -> failure x
  Grammar.Abs.TLit id type_ -> failure x
transStringList :: Grammar.Abs.StringList -> Result
transStringList x = case x of
  Grammar.Abs.StringList strings -> failure x

