-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Grammar.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def
    = DefFun TypeC Id [Arg] Body
    | DefFun3 TypeC [Ass]
    | DefUsing QConst
    | DefTypedef TypeC Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ADel TypeC | ADecl TypeC Id | Aref Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SInit TypeC [Ass]
    | SReturn Exp
    | SWhile Exp Stm
    | SWhile2 Exp
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SFor TypeC Ass Exp Exp Stm
    | SDowh Stm Exp
    | STypeDef TypeC Id
    | SExp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Body = BBlock [Stm] | BEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString [String]
    | EChar Char
    | ETrue
    | EFalse
    | EQConst QConst
    | EApp Exp [Exp]
    | EIndex Exp Exp
    | EProj Exp Exp
    | EProj2 Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | EPoint Exp
    | ENot Exp
    | ERem Exp Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtWq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAss2 Exp Exp
    | EAss3 Exp Exp
    | ECon Exp Exp Exp
    | EThrow Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QConst = QCon [Const]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Const = CId Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tdouble | Tint | Tvoid | Tchar | TQconst QConst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeC = Tref Type | Tconst1 Type | Tconst2 Type | Tref1 Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ass = Hint Id | Hintstm Id Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

