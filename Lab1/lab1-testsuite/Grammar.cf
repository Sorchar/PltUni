PDefs.   	Program ::= [Def] ;
terminator  Def ""			  ;

DFun.		Def		::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

separator   Arg     "," 	  ;
separator nonempty Decl ","   ;

terminator  Stm ""			  ;

DNameSpace. Def     ::= "using " Exp10 ";";
DDecl. 		Def		::= Type Decl ";" ;
DDecls. 	Def		::= Type [Decl] ";" ;
DTypeDefId. Stm     ::= "typedef" Type Id ";";

ADecl. 	    Arg     ::= Type Id ;
SDecl. 		Stm		::= Type Decl ";" ;
SDecls. 	Stm		::= Type [Decl] ";" ;
SDeclId.    Decl    ::= Id;
SInit. 		Stm		::= Type Id "=" Exp ";" ;
SEexp.		Stm		::= Exp ";" ;
SReturn. 	Stm		::= "return" Exp ";" ;
SWhile. 	Stm		::= "while" "(" Exp ")" Stm;
SBlock. 	Stm 	::= "{" [Stm] "}" ;
SIfElse. 	Stm 	::= "if" "(" Exp ")" Stm Else ;
SEElse.     Else    ::= "";
SElse.     Else     ::= "else" Stm;
SBlock.     Stm     ::= "{" [Stm] "}";


EInt. 		Exp15 	::= Integer ;
EDouble. 	Exp15 	::= Double  ;
EString. 	Exp15   ::= StringList;
ETrue. 		Exp15 	::= "true"  ;
EFalse.		Exp15 	::= "false" ;
EId.		Exp15   ::= Id 		;

EIndex.		Exp15   ::= Exp15 	"[" Exp "]" ;
ECall.		Exp15   ::= Exp15 	"(" [Exp] ")" ;
EFun.		Exp15   ::= Exp15 "." Exp14;
EPIncr.		Exp14	::= Exp15 "++" ;
EPDcecr.	Exp14	::= Exp15 "--" ;

EIncr. 		Exp13   ::= "++" Exp14 ;
EDecr.		Exp13 	::= "--" Exp14 ;
ENeg.		Exp13   ::= "-"  Exp14 ;

EMul.		Exp12   ::= Exp12 "*" Exp13 ;
EDiv. 		Exp12 	::= Exp12 "/" Exp13 ;
EMod. 		Exp12 	::= Exp12 "%" Exp13 ;
EAdd.		Exp11   ::= Exp11 "+" Exp12 ;
ESub.		Exp11	::= Exp11 "-" Exp12 ;
ELt.		Exp9 	::= Exp9  "<" Exp10 ;
EGt.		Exp9 	::= Exp9  ">" Exp10 ;
ELEq.		Exp9 	::= Exp9  "<=" Exp10;
EGEq.		Exp9 	::= Exp9  ">=" Exp10;
EEq.		Exp8 	::= Exp8  "==" Exp9 ;
ENEq.		Exp8	::= Exp8  "!=" Exp9 ;
EAnd.		Exp4 	::= Exp4  "&&" Exp5 ;
EOr.		Exp3    ::= Exp3  "||" Exp4 ;
EAss.		Exp2    ::= Exp3  "="  Exp2 ;
EThrowE.	Exp2 	::= "throw"    Exp2 ;
EQstnmrk.	Exp2    ::= Exp2 "?" Exp3 ":" Exp3 ;

ELl.		Exp15	::= Exp15 "<<" Exp15 ;
EGg.		Exp15	::= Exp15 ">>" Id ;

ELibs.      Exp15   ::=  Id "::" Exp10;
ELib.       Exp15   ::=  Id "::" Id;
ELibType.   Exp15   ::=  Id "::" Type;
ETerm.      Exp15   ::= "\"" "\"";

coercions Exp 16  ;
separator Exp "," ;

Tbool. 	 Type ::= "bool"   ;
Tdouble. Type ::= "double" ;
Tint.	 Type ::= "int"    ;
Tstring. Type ::= "string" ;
Tvoid.	 Type ::= "void"   ;
Tnew.	 Type ::= Id;
TLit.    Type ::= Id "::" Type;

StringList. StringList ::= [String];
separator nonempty String "";

token Id (letter (letter | digit | '_')*) ;



comment     "//"			  ;
comment     "/*" "*/"		  ; 
comment     "#"