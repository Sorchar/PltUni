PDefs.   	Program ::= [Def] ;
terminator  Def ""			  ;

DFun.		Def		::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunCall.	Def		::= Type Id "(" [Arg] ")" ";" ;

separator   Arg     "," 	  ;
separator nonempty Decl ","   ;

terminator  Stm ""			  ;

DNameSpace. Def     ::= "using " Exp ";";
DDecl. 		Def		::= Type Decl ";" ; -- 1 shift conflict
DDecls. 	Def		::= Type [Decl] ";" ; -- 1 shift conflict
STypeDefId. Stm     ::= "typedef" Type Id ";"; -- 1 or 2 reduce reduce
DTypeDefId. Def     ::= "typedef" Type Id ";";

ADecl. 	    Arg     ::= Type ;
ADeclId. 	Arg     ::= Type Id ;
SDecl. 		Stm		::= Type Decl ";" ;
SDecls. 	Stm		::= Type [Decl] ";" ;
SDeclId.    Decl    ::= Id;
SInit. 		Stm		::= Type Id "=" Exp ";" ;
SEexp.		Stm		::= Exp ";" ;
SReturn. 	Stm		::= "return" Exp ";" ;
SWhile. 	Stm		::= "while" "(" Exp ")" Stm;
SEWhile. 	Stm		::= "while" "(" Exp ")" ";";
SBlock. 	Stm 	::= "{" [Stm] "}" ;
SIfElse. 	Stm 	::= "if" "(" Exp ")" Stm Else ;
SEElse.     Else    ::= "";
SElse.      Else    ::= "else" Stm;
SBlock.     Stm     ::= "{" [Stm] "}";
SConstRefInit.  Stm	::= "const" Type "&" Id "=" Exp ";" ;
SFor.           Stm ::= "for" "(" Type Id "=" Exp ";" Exp ";" Exp ")" Stm ;
SConstInitId.     Stm  ::= "const" Type Id "=" Exp ";" ;
SDo.		Stm	    ::=	"do" Stm "while" "("Exp")" ";" ;


AConstRefTypeId. Arg ::= "const" Type "&" Id;
ARefId.          Arg ::= Type "&" Id ;
AConstRefType.   Arg ::= "const" Type "&";
ARefType.        Arg ::=  Type "&";




EChar. 		Exp15 	::= Char ;
EInt. 		Exp15 	::= Integer ;
EDouble. 	Exp15 	::= Double  ;
EString. 	Exp15   ::= StringList;
ETrue. 		Exp15 	::= "true"  ;
EFalse.		Exp15 	::= "false" ;
EId.		Exp15   ::= Id 		;

EIndex.		Exp15   ::= Exp15 	"[" Exp "]" ; -- 2 shift and 2 reduce reduce
ECall.		Exp15   ::= Exp15 	"(" [Exp] ")" ; -- 2 shift 1 reduce
EFun.		Exp15   ::= Exp15 "." Exp14; -- 2 shift 1 reduce
EPIncr.		Exp14	::= Exp15 "++" ;
EPDcecr.	Exp14	::= Exp15 "--" ;


EDeref. 	Exp15   ::= "*"  Exp15 ;
ENot. 		Exp13   ::= "!"  Exp14 ;
EIncr. 		Exp13   ::= "++" Exp14 ;
EDecr.		Exp13 	::= "--" Exp14 ;
ENeg.		Exp13   ::= "-"  Exp14 ;

EArrow.	    Exp13	::= Exp13 "->" Exp14;
EMul.		Exp12   ::= Exp12 "*" Exp13 ;
EDiv. 		Exp12 	::= Exp12 "/" Exp13 ;
EMod. 		Exp12 	::= Exp12 "%" Exp13 ;
EAdd.		Exp11   ::= Exp11 "+" Exp12 ;
ESub.		Exp11	::= Exp11 "-" Exp12 ;
ELt.		Exp9 	::= Exp9  "<" Exp10 ;
EGt.		Exp9 	::= Exp9  ">" Exp10 ;
ELEq.		Exp9 	::= Exp9  "<=" Exp10;
EGEq.		Exp9 	::= Exp9  ">=" Exp10;
EEq.		Exp8 	::= Exp8  "==" Exp9 ;
ENEq.		Exp8	::= Exp8  "!=" Exp9 ;
EAnd.		Exp4 	::= Exp4  "&&" Exp5 ;
EOr.		Exp3    ::= Exp3  "||" Exp4 ;
EAss.		Exp2    ::= Exp3  "="  Exp4 ; -- shift conflict
EThrowE.	Exp2 	::= "throw"    Exp2 ; -- shift conflict
EQstnmrk.	Exp2    ::= Exp3 "?" Exp2 ":" Exp2 ;

ELl.		Exp15	::= Exp15 "<<" Exp14 ; 
EGg.		Exp15	::= Exp15 ">>" Id ; -- exp14 or id?

ELib.       Exp15   ::=  Type;
ELibs.      Exp15   ::=  Id "::" Exp16;
ETerm.      Exp15   ::= "\"" "\"";

coercions Exp 16  ;
separator Exp "," ;

Tbool. 	 Type ::= "bool"   ;
Tdouble. Type ::= "double" ;
Tint.	 Type ::= "int"    ;
Tstring. Type ::= "string" ;
Tvoid.	 Type ::= "void"   ;
Tnew.	 Type ::= Id;
TLit.    Type ::= Id "::" Type;

StringList. StringList ::= [String];
separator nonempty String "";

token Id (letter (letter | digit | '_')*) ;



comment     "//"			  ;
comment     "/*" "*/"		  ; 
comment     "#"				  ;