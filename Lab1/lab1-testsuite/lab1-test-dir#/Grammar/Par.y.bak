-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Grammar.Par where
import qualified Grammar.Abs
import Grammar.Lex
}

%name pProgram Program
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'char' { PT _ (TS _ 34) }
  'const' { PT _ (TS _ 35) }
  'do' { PT _ (TS _ 36) }
  'double' { PT _ (TS _ 37) }
  'else' { PT _ (TS _ 38) }
  'false' { PT _ (TS _ 39) }
  'for' { PT _ (TS _ 40) }
  'if' { PT _ (TS _ 41) }
  'int' { PT _ (TS _ 42) }
  'return' { PT _ (TS _ 43) }
  'throw' { PT _ (TS _ 44) }
  'true' { PT _ (TS _ 45) }
  'typedef' { PT _ (TS _ 46) }
  'using' { PT _ (TS _ 47) }
  'void' { PT _ (TS _ 48) }
  'while' { PT _ (TS _ 49) }
  '{' { PT _ (TS _ 50) }
  '||' { PT _ (TS _ 51) }
  '}' { PT _ (TS _ 52) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_charac { PT _ (TC $$) }
  L_quoted { PT _ (TL $$) }
  L_Id { PT _ (T_Id $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ($1)) :: Double }

Char    :: { Char }
Char     : L_charac { (read ($1)) :: Char }

String  :: { String }
String   : L_quoted { $1 }

Id :: { Grammar.Abs.Id}
Id  : L_Id { Grammar.Abs.Id $1 }

Program :: { Grammar.Abs.Program }
Program : ListDef { Grammar.Abs.PDefs $1 }

ListDef :: { [Grammar.Abs.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { Grammar.Abs.Def }
Def : TypeC Id '(' ListArg ')' Body { Grammar.Abs.DefFun $1 $2 $4 $6 }
    | TypeC ListAss ';' { Grammar.Abs.DefFun3 $1 $2 }
    | 'using' QConst ';' { Grammar.Abs.DefUsing $2 }
    | 'typedef' TypeC Id ';' { Grammar.Abs.DefTypedef $2 $3 }

Arg :: { Grammar.Abs.Arg }
Arg : TypeC { Grammar.Abs.ADel $1 }
    | TypeC Id { Grammar.Abs.ADecl $1 $2 }
    | '*' Id { Grammar.Abs.Aref $2 }

ListArg :: { [Grammar.Abs.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Stm :: { Grammar.Abs.Stm }
Stm : TypeC ListAss ';' { Grammar.Abs.SInit $1 $2 }
    | 'return' Exp ';' { Grammar.Abs.SReturn $2 }
    | 'while' '(' Exp ')' Stm { Grammar.Abs.SWhile $3 $5 }
    | 'while' '(' Exp ')' ';' { Grammar.Abs.SWhile2 $3 }
    | '{' ListStm '}' { Grammar.Abs.SBlock $2 }
    | 'if' '(' Exp ')' Stm { Grammar.Abs.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { Grammar.Abs.SIfElse $3 $5 $7 }
    | 'for' '(' TypeC Ass ';' Exp ';' Exp ')' Stm { Grammar.Abs.SFor $3 $4 $6 $8 $10 }
    | 'do' Stm 'while' '(' Exp ')' ';' { Grammar.Abs.SDowh $2 $5 }
    | 'typedef' TypeC Id ';' { Grammar.Abs.STypeDef $2 $3 }
    | Exp ';' { Grammar.Abs.SExp $1 }

ListStm :: { [Grammar.Abs.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Body :: { Grammar.Abs.Body }
Body : '{' ListStm '}' { Grammar.Abs.BBlock $2 }
     | ';' { Grammar.Abs.BEmpty }

Exp15 :: { Grammar.Abs.Exp }
Exp15 : Integer { Grammar.Abs.EInt $1 }
      | Double { Grammar.Abs.EDouble $1 }
      | ListString { Grammar.Abs.EString $1 }
      | Char { Grammar.Abs.EChar $1 }
      | 'true' { Grammar.Abs.ETrue }
      | 'false' { Grammar.Abs.EFalse }
      | QConst { Grammar.Abs.EQConst $1 }
      | '(' Exp ')' { $2 }

Exp14 :: { Grammar.Abs.Exp }
Exp14 : Exp14 '(' ListExp ')' { Grammar.Abs.EApp $1 $3 }
      | Exp14 '[' Exp ']' { Grammar.Abs.EIndex $1 $3 }
      | Exp14 '.' Exp15 { Grammar.Abs.EProj $1 $3 }
      | Exp14 '->' Exp15 { Grammar.Abs.EProj2 $1 $3 }
      | Exp14 '++' { Grammar.Abs.EPIncr $1 }
      | Exp14 '--' { Grammar.Abs.EPDecr $1 }
      | Exp15 { $1 }

Exp13 :: { Grammar.Abs.Exp }
Exp13 : '++' Exp13 { Grammar.Abs.EIncr $2 }
      | '--' Exp13 { Grammar.Abs.EDecr $2 }
      | '*' Exp13 { Grammar.Abs.EPoint $2 }
      | '!' Exp13 { Grammar.Abs.ENot $2 }
      | Exp14 { $1 }

Exp12 :: { Grammar.Abs.Exp }
Exp12 : Exp12 '%' Exp13 { Grammar.Abs.ERem $1 $3 }
      | Exp12 '*' Exp13 { Grammar.Abs.ETimes $1 $3 }
      | Exp12 '/' Exp13 { Grammar.Abs.EDiv $1 $3 }
      | Exp13 { $1 }

Exp11 :: { Grammar.Abs.Exp }
Exp11 : Exp11 '+' Exp12 { Grammar.Abs.EPlus $1 $3 }
      | Exp11 '-' Exp12 { Grammar.Abs.EMinus $1 $3 }
      | Exp12 { $1 }

Exp10 :: { Grammar.Abs.Exp }
Exp10 : Exp10 '<<' Exp11 { Grammar.Abs.ELShift $1 $3 }
      | Exp10 '>>' Exp11 { Grammar.Abs.ERShift $1 $3 }
      | Exp11 { $1 }

Exp9 :: { Grammar.Abs.Exp }
Exp9 : Exp9 '<' Exp10 { Grammar.Abs.ELt $1 $3 }
     | Exp9 '>' Exp10 { Grammar.Abs.EGt $1 $3 }
     | Exp9 '<=' Exp10 { Grammar.Abs.ELtEq $1 $3 }
     | Exp9 '>=' Exp10 { Grammar.Abs.EGtWq $1 $3 }
     | Exp10 { $1 }

Exp8 :: { Grammar.Abs.Exp }
Exp8 : Exp8 '==' Exp9 { Grammar.Abs.EEq $1 $3 }
     | Exp8 '!=' Exp9 { Grammar.Abs.ENEq $1 $3 }
     | Exp9 { $1 }

Exp4 :: { Grammar.Abs.Exp }
Exp4 : Exp4 '&&' Exp5 { Grammar.Abs.EAnd $1 $3 } | Exp5 { $1 }

Exp3 :: { Grammar.Abs.Exp }
Exp3 : Exp3 '||' Exp4 { Grammar.Abs.EOr $1 $3 } | Exp4 { $1 }

Exp2 :: { Grammar.Abs.Exp }
Exp2 : Exp3 '=' Exp2 { Grammar.Abs.EAss $1 $3 }
     | Exp3 '+=' Exp2 { Grammar.Abs.EAss2 $1 $3 }
     | Exp3 '-=' Exp2 { Grammar.Abs.EAss3 $1 $3 }
     | Exp3 '?' Exp2 ':' Exp2 { Grammar.Abs.ECon $1 $3 $5 }
     | Exp3 { $1 }

Exp1 :: { Grammar.Abs.Exp }
Exp1 : 'throw' Exp1 { Grammar.Abs.EThrow $2 } | Exp2 { $1 }

Exp :: { Grammar.Abs.Exp }
Exp : Exp1 { $1 }

Exp5 :: { Grammar.Abs.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { Grammar.Abs.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { Grammar.Abs.Exp }
Exp7 : Exp8 { $1 }

ListExp :: { [Grammar.Abs.Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }

ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }

QConst :: { Grammar.Abs.QConst }
QConst : ListConst { Grammar.Abs.QCon $1 }

Const :: { Grammar.Abs.Const }
Const : Id { Grammar.Abs.CId $1 }

ListConst :: { [Grammar.Abs.Const] }
ListConst : Const { (:[]) $1 } | Const '::' ListConst { (:) $1 $3 }

Type :: { Grammar.Abs.Type }
Type : 'bool' { Grammar.Abs.Tbool }
     | 'double' { Grammar.Abs.Tdouble }
     | 'int' { Grammar.Abs.Tint }
     | 'void' { Grammar.Abs.Tvoid }
     | 'char' { Grammar.Abs.Tchar }
     | QConst { Grammar.Abs.TQconst $1 }

TypeC :: { Grammar.Abs.TypeC }
TypeC : Type '&' { Grammar.Abs.Tref $1 }
      | 'const' Type { Grammar.Abs.Tconst1 $2 }
      | 'const' Type '&' { Grammar.Abs.Tconst2 $2 }
      | Type { Grammar.Abs.Tref1 $1 }

Ass :: { Grammar.Abs.Ass }
Ass : Id { Grammar.Abs.Hint $1 }
    | Id '=' Exp { Grammar.Abs.Hintstm $1 $3 }

ListAss :: { [Grammar.Abs.Ass] }
ListAss : Ass { (:[]) $1 } | Ass ',' ListAss { (:) $1 $3 }

ListId :: { [Grammar.Abs.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

