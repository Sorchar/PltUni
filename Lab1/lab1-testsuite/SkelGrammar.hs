-- Haskell module generated by the BNF converter

module SkelGrammar where

import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsGrammar.Id -> Result
transId x = case x of
  AbsGrammar.Id string -> failure x
transProgram :: AbsGrammar.Program -> Result
transProgram x = case x of
  AbsGrammar.PDefs defs -> failure x
transDef :: AbsGrammar.Def -> Result
transDef x = case x of
  AbsGrammar.DFun type_ id args stms -> failure x
transArg :: AbsGrammar.Arg -> Result
transArg x = case x of
  AbsGrammar.ADecl type_ id -> failure x
transStm :: AbsGrammar.Stm -> Result
transStm x = case x of
  AbsGrammar.SDecl type_ id -> failure x
  AbsGrammar.SInit type_ id exp -> failure x
  AbsGrammar.SEexp exp -> failure x
  AbsGrammar.SReturn exp -> failure x
  AbsGrammar.SWhile exp stm -> failure x
  AbsGrammar.SBlock stms -> failure x
  AbsGrammar.SIfElse exp stm1 stm2 -> failure x
transExp :: AbsGrammar.Exp -> Result
transExp x = case x of
  AbsGrammar.EInt integer -> failure x
  AbsGrammar.EDouble double -> failure x
  AbsGrammar.EString string -> failure x
  AbsGrammar.ETrue -> failure x
  AbsGrammar.EFalse -> failure x
  AbsGrammar.EId id -> failure x
  AbsGrammar.ECall id exps -> failure x
  AbsGrammar.EPIncr exp -> failure x
  AbsGrammar.EPDcecr exp -> failure x
  AbsGrammar.EIncr exp -> failure x
  AbsGrammar.EDecr exp -> failure x
  AbsGrammar.ENeg exp -> failure x
  AbsGrammar.EMul exp1 exp2 -> failure x
  AbsGrammar.EDiv exp1 exp2 -> failure x
  AbsGrammar.EAdd exp1 exp2 -> failure x
  AbsGrammar.ESub exp1 exp2 -> failure x
  AbsGrammar.ELt exp1 exp2 -> failure x
  AbsGrammar.EGt exp1 exp2 -> failure x
  AbsGrammar.ELEq exp1 exp2 -> failure x
  AbsGrammar.EGEq exp1 exp2 -> failure x
  AbsGrammar.EEq exp1 exp2 -> failure x
  AbsGrammar.ENEq exp1 exp2 -> failure x
  AbsGrammar.EAnd exp1 exp2 -> failure x
  AbsGrammar.EOr exp1 exp2 -> failure x
  AbsGrammar.EAss exp1 exp2 -> failure x
transType :: AbsGrammar.Type -> Result
transType x = case x of
  AbsGrammar.Tbool -> failure x
  AbsGrammar.Tdouble -> failure x
  AbsGrammar.Tint -> failure x
  AbsGrammar.Tstring -> failure x
  AbsGrammar.Tvoid -> failure x

