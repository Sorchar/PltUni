-- Haskell module generated by the BNF converter

module SkelGrammar where

import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsGrammar.Id -> Result
transId x = case x of
  AbsGrammar.Id string -> failure x
transProgram :: AbsGrammar.Program -> Result
transProgram x = case x of
  AbsGrammar.PDefs defs -> failure x
transDef :: AbsGrammar.Def -> Result
transDef x = case x of
  AbsGrammar.DFun type_ id args stms -> failure x
  AbsGrammar.DFunCall type_ id args -> failure x
  AbsGrammar.DNameSpace exp -> failure x
  AbsGrammar.DDecl type_ decl -> failure x
  AbsGrammar.DDecls type_ decls -> failure x
  AbsGrammar.DTypeDefId type_ id -> failure x
transStm :: AbsGrammar.Stm -> Result
transStm x = case x of
  AbsGrammar.STypeDefId type_ id -> failure x
  AbsGrammar.SDecl type_ decl -> failure x
  AbsGrammar.SDecls type_ decls -> failure x
  AbsGrammar.SInit type_ id exp -> failure x
  AbsGrammar.SEexp exp -> failure x
  AbsGrammar.SReturn exp -> failure x
  AbsGrammar.SWhile exp stm -> failure x
  AbsGrammar.SEWhile exp -> failure x
  AbsGrammar.SBlock stms -> failure x
  AbsGrammar.SIfElse exp stm else_ -> failure x
  AbsGrammar.SConstRefInit type_ id exp -> failure x
  AbsGrammar.SFor type_ id exp1 exp2 exp3 stm -> failure x
  AbsGrammar.SConstInitId type_ id exp -> failure x
  AbsGrammar.SDo stm exp -> failure x
transArg :: AbsGrammar.Arg -> Result
transArg x = case x of
  AbsGrammar.ADecl type_ -> failure x
  AbsGrammar.ADeclId type_ id -> failure x
  AbsGrammar.AConstRefTypeId type_ id -> failure x
  AbsGrammar.ARefId type_ id -> failure x
  AbsGrammar.AConstRefType type_ -> failure x
  AbsGrammar.ARefType type_ -> failure x
transDecl :: AbsGrammar.Decl -> Result
transDecl x = case x of
  AbsGrammar.SDeclId id -> failure x
transElse :: AbsGrammar.Else -> Result
transElse x = case x of
  AbsGrammar.SEElse -> failure x
  AbsGrammar.SElse stm -> failure x
transExp :: AbsGrammar.Exp -> Result
transExp x = case x of
  AbsGrammar.EChar char -> failure x
  AbsGrammar.EInt integer -> failure x
  AbsGrammar.EDouble double -> failure x
  AbsGrammar.EString stringlist -> failure x
  AbsGrammar.ETrue -> failure x
  AbsGrammar.EFalse -> failure x
  AbsGrammar.EId id -> failure x
  AbsGrammar.EIndex exp1 exp2 -> failure x
  AbsGrammar.ECall exp exps -> failure x
  AbsGrammar.EFun exp1 exp2 -> failure x
  AbsGrammar.EPIncr exp -> failure x
  AbsGrammar.EPDcecr exp -> failure x
  AbsGrammar.EDeref exp -> failure x
  AbsGrammar.ENot exp -> failure x
  AbsGrammar.EIncr exp -> failure x
  AbsGrammar.EDecr exp -> failure x
  AbsGrammar.ENeg exp -> failure x
  AbsGrammar.EArrow exp1 exp2 -> failure x
  AbsGrammar.EMul exp1 exp2 -> failure x
  AbsGrammar.EDiv exp1 exp2 -> failure x
  AbsGrammar.EMod exp1 exp2 -> failure x
  AbsGrammar.EAdd exp1 exp2 -> failure x
  AbsGrammar.ESub exp1 exp2 -> failure x
  AbsGrammar.ELt exp1 exp2 -> failure x
  AbsGrammar.EGt exp1 exp2 -> failure x
  AbsGrammar.ELEq exp1 exp2 -> failure x
  AbsGrammar.EGEq exp1 exp2 -> failure x
  AbsGrammar.EEq exp1 exp2 -> failure x
  AbsGrammar.ENEq exp1 exp2 -> failure x
  AbsGrammar.EAnd exp1 exp2 -> failure x
  AbsGrammar.EOr exp1 exp2 -> failure x
  AbsGrammar.EAss exp1 exp2 -> failure x
  AbsGrammar.EThrowE exp -> failure x
  AbsGrammar.EQstnmrk exp1 exp2 exp3 -> failure x
  AbsGrammar.ELl exp1 exp2 -> failure x
  AbsGrammar.EGg exp id -> failure x
  AbsGrammar.ELib type_ -> failure x
  AbsGrammar.ETerm -> failure x
transType :: AbsGrammar.Type -> Result
transType x = case x of
  AbsGrammar.Tbool -> failure x
  AbsGrammar.Tdouble -> failure x
  AbsGrammar.Tint -> failure x
  AbsGrammar.Tstring -> failure x
  AbsGrammar.Tvoid -> failure x
  AbsGrammar.Tnew id -> failure x
  AbsGrammar.TLit id type_ -> failure x
transStringList :: AbsGrammar.StringList -> Result
transStringList x = case x of
  AbsGrammar.StringList strings -> failure x

