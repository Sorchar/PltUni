-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsGrammar where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ADecl Type Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SDecl Type Id
    | SInit Type Id Exp
    | SEexp Exp
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString String
    | ETrue
    | EFalse
    | EId Id
    | ECall Id [Exp]
    | EPIncr Exp
    | EPDcecr Exp
    | EIncr Exp
    | EDecr Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELEq Exp Exp
    | EGEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tdouble | Tint | Tstring | Tvoid
  deriving (C.Eq, C.Ord, C.Show, C.Read)

